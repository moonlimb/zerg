{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import xarray as xr\n",
    "\n",
    "% matplotlib inline"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysis of CIL's current data (La Porta + PWT)\n",
    "\n",
    "\n",
    "**Data Sources:** La Porta and PWT. PWT has only national level data, so higher resolution La Porta data is used to downscale PWT. There are lots of doubts about reliability of this method. \n",
    "\n",
    "1) La porta authors claim that using the rescaling method (described below in Methodology) on PWT data results in data equivalent to WB data. However, when re-done by Greg, this resulted 0-50% disagreements.\n",
    "\n",
    "2) cannot be reached to answer questions...\n",
    "\n",
    "## Column Variables\n",
    "\n",
    "`year`\n",
    "\n",
    "`gdppccountry`: GDP per capita, country-level\n",
    "\n",
    "`gdppcstate`: GDP per capita, state-level\n",
    "\n",
    "`gdppc_adm0_PWT`: GDP per capita, ADM0/national level (from PWT)\n",
    "\n",
    "`gdppcstate_rescaled`: GDP per capita, ADM1/subnational level (calculated \n",
    "by U Chicago team)\n",
    "\n",
    "### Methodology\n",
    "Methodology for rescaled state-level GDP per capital calculation:\n",
    "\n",
    "Use (ADM1_LP/ADM0_LP) x ADM0_PWT = ADM1_PWT\n",
    "\n",
    "This methodology was outlined in La Porta paper. However U chicago team couldn't reproduce the results (conversation with Greg)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>year</th>\n",
       "      <th>gdppccountry</th>\n",
       "      <th>gdppcstate</th>\n",
       "      <th>gdppc_adm0_PWT</th>\n",
       "      <th>gdppcstate_rescaled</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>88358.000000</td>\n",
       "      <td>9479.000000</td>\n",
       "      <td>9479.000000</td>\n",
       "      <td>88280.000000</td>\n",
       "      <td>57107.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1985.220116</td>\n",
       "      <td>12853.722656</td>\n",
       "      <td>11863.801758</td>\n",
       "      <td>13614.154297</td>\n",
       "      <td>15259.715820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>18.224983</td>\n",
       "      <td>11655.899414</td>\n",
       "      <td>11882.170898</td>\n",
       "      <td>15113.656250</td>\n",
       "      <td>15098.367188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1950.000000</td>\n",
       "      <td>365.323792</td>\n",
       "      <td>188.968506</td>\n",
       "      <td>161.594772</td>\n",
       "      <td>228.565933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1970.000000</td>\n",
       "      <td>4378.643066</td>\n",
       "      <td>3032.363525</td>\n",
       "      <td>4181.044434</td>\n",
       "      <td>5059.138428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1987.000000</td>\n",
       "      <td>8065.569824</td>\n",
       "      <td>6865.508789</td>\n",
       "      <td>9317.794922</td>\n",
       "      <td>10263.880859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2001.000000</td>\n",
       "      <td>20244.890625</td>\n",
       "      <td>18713.495117</td>\n",
       "      <td>17801.166016</td>\n",
       "      <td>21583.263672</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2014.000000</td>\n",
       "      <td>105184.203125</td>\n",
       "      <td>166007.296875</td>\n",
       "      <td>238585.437500</td>\n",
       "      <td>317208.687500</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               year   gdppccountry     gdppcstate  gdppc_adm0_PWT  \\\n",
       "count  88358.000000    9479.000000    9479.000000    88280.000000   \n",
       "mean    1985.220116   12853.722656   11863.801758    13614.154297   \n",
       "std       18.224983   11655.899414   11882.170898    15113.656250   \n",
       "min     1950.000000     365.323792     188.968506      161.594772   \n",
       "25%     1970.000000    4378.643066    3032.363525     4181.044434   \n",
       "50%     1987.000000    8065.569824    6865.508789     9317.794922   \n",
       "75%     2001.000000   20244.890625   18713.495117    17801.166016   \n",
       "max     2014.000000  105184.203125  166007.296875   238585.437500   \n",
       "\n",
       "       gdppcstate_rescaled  \n",
       "count         57107.000000  \n",
       "mean          15259.715820  \n",
       "std           15098.367188  \n",
       "min             228.565933  \n",
       "25%            5059.138428  \n",
       "50%           10263.880859  \n",
       "75%           21583.263672  \n",
       "max          317208.687500  "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_stata('pwt_income_adm1.dta')\n",
    "\n",
    "df.describe()\n",
    "# colnames are year, gdppccountry, gdppcstate, gdppc_adm0_PWT"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "                          4949\n",
       "Thailand                  4680\n",
       "Turkey                    3965\n",
       "United States             3315\n",
       "Spain                     3250\n",
       "Japan                     3055\n",
       "Romania                   2310\n",
       "Mexico                    2080\n",
       "Russian Federation        1925\n",
       "India                     1820\n",
       "Vietnam                   1755\n",
       "China                     1701\n",
       "Colombia                  1625\n",
       "Switzerland               1560\n",
       "Argentina                 1560\n",
       "Iran, Islamic Rep.        1500\n",
       "Venezuela                 1495\n",
       "Peru                      1495\n",
       "Indonesia                 1430\n",
       "Guatemala                 1430\n",
       "Sweden                    1365\n",
       "France                    1365\n",
       "Egypt, Arab Rep.          1365\n",
       "Ecuador                   1365\n",
       "Brazil                    1300\n",
       "Italy                     1300\n",
       "Bulgaria                  1260\n",
       "Norway                    1235\n",
       "Uruguay                   1235\n",
       "Paraguay                  1152\n",
       "                          ... \n",
       "Croatia                    546\n",
       "Albania                    540\n",
       "Australia                  520\n",
       "Greece                     512\n",
       "Morocco                    455\n",
       "Philippines                455\n",
       "Nicaragua                  455\n",
       "Ireland                    455\n",
       "Estonia                    375\n",
       "Kazakhstan                 350\n",
       "Czech Republic             350\n",
       "Benin                      336\n",
       "Lesotho                    330\n",
       "Germany, East              325\n",
       "Denmark                    325\n",
       "Portugal                   325\n",
       "Kenya                      325\n",
       "Finland                    325\n",
       "United Arab Emirates       315\n",
       "Bosnia and Herzegovina     312\n",
       "Slovenia                   312\n",
       "Uzbekistan                 300\n",
       "Nepal                      275\n",
       "Pakistan                   260\n",
       "South Africa               260\n",
       "Nigeria                    260\n",
       "Lithuania                  250\n",
       "Macedonia                  208\n",
       "Slovak Republic            200\n",
       "Kyrgyz Republic            175\n",
       "Name: countryname, Length: 84, dtype: int64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['countryname'].nunique() # 84 unique country names\n",
    "len(df['countryname'].value_counts()) # 84\n",
    "df['countryname'].count() # 88358\n",
    "uniq_countries = df['countryname'].value_counts() # from 4949 empty values\n",
    "# 4680 Thailand to 200 Slovak Republic and 175 Kyrgyz Republic\n",
    "\n",
    "uniq_countries.shape\n",
    "uniq_countries.get_values()\n",
    "uniq_countries\n",
    "# Q -> Why are the numbers of country appearances all different?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['countryname', 'countrycode', 'region', 'year', 'gdppccountry',\n",
       "       'gdppcstate', 'gdppc_adm0_PWT', 'gdppcstate_rescaled'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "56560"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nMuUAMDPL1P8DCGuaCtRlvYgAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1c21aee080>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['gdppccountry'].hist(bins=50)\n",
    "#df['gdppcstate'].hist(bins=50)\n",
    "#df['gdppc_adm0_PWT'].hist(bins=50)\n",
    "df['gdppcstate_rescaled'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        3766.277832\n",
       "1        3766.277832\n",
       "2        3766.277832\n",
       "3        3766.277832\n",
       "4        3766.277832\n",
       "5        3766.277832\n",
       "6        3766.277832\n",
       "7        3766.277832\n",
       "8        3766.277832\n",
       "9        3766.277832\n",
       "10       3766.277832\n",
       "11       3766.277832\n",
       "12       3825.462402\n",
       "13       3825.462402\n",
       "14       3825.462402\n",
       "15       3825.462402\n",
       "16       3825.462402\n",
       "17       3825.462402\n",
       "18       3825.462402\n",
       "19       3825.462402\n",
       "20       3825.462402\n",
       "21       3825.462402\n",
       "22       3825.462402\n",
       "23       3825.462402\n",
       "24       3887.560059\n",
       "25       3887.560059\n",
       "26       3887.560059\n",
       "27       3887.560059\n",
       "28       3887.560059\n",
       "29       3887.560059\n",
       "            ...     \n",
       "88328    1341.086670\n",
       "88329    1319.567017\n",
       "88330    1287.098999\n",
       "88331    1337.860229\n",
       "88332    1363.666992\n",
       "88333    1417.178833\n",
       "88334    1456.779297\n",
       "88335    1322.787598\n",
       "88336    1322.290039\n",
       "88337    1372.141846\n",
       "88338    1350.098511\n",
       "88339    1457.253052\n",
       "88340    1455.701660\n",
       "88341    1442.900269\n",
       "88342    1374.440674\n",
       "88343    1249.447998\n",
       "88344    1236.739380\n",
       "88345    1155.272339\n",
       "88346    1062.144287\n",
       "88347    1016.005432\n",
       "88348     965.972290\n",
       "88349     920.787354\n",
       "88350     879.325439\n",
       "88351     825.363525\n",
       "88352    1262.618652\n",
       "88353    1380.802124\n",
       "88354    1514.654663\n",
       "88355    1639.062378\n",
       "88356    1674.318604\n",
       "88357    1687.633911\n",
       "Name: gdppc_adm0_PWT, Length: 88358, dtype: float32"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns\n",
    "df['gdppc_adm0_PWT']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
